import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { getGroups } from "./groupsAPI";
import { getUser, saveUser } from "../admin/adminAPI";

const initialState = {
  success: false,
  capabilities: null,
  groups: [],
  selectedGroup: null,
  teams: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getGroupsThunk = createAsyncThunk("groups/getGroups", async () => {
  return await getGroups();
  // The value we return becomes the `fulfilled` action payload
});

export const getUserThunk = createAsyncThunk(
  "groups/getUser",
  async ({ userId }) => {
    return await getUser({ userId });
    // The value we return becomes the `fulfilled` action payload
  }
);
export const updateUserThunk = createAsyncThunk(
  "groups/updateUser",
  async ({ userId, updatedUser }) => {
    return await saveUser({ userId, updatedUser });
    // The value we return becomes the `fulfilled` action payload
  }
);

export const groupsSlice = createSlice({
  name: "groups",
  initialState,
  reducers: {
    setSelectedGroup: (state, action) => {
      state.selectedGroup = action.payload;
    },
    setMemberQueues: (state, action) => {
      let teams = JSON.parse(JSON.stringify(state.teams));
      Object.keys(teams).forEach((groupName) => {
        if (Object.keys(teams[groupName]).includes(action.payload.userId)) {
          const user = teams[groupName][action.payload.userId].user;
          teams[groupName][action.payload.userId].user = {
            ...user,
            features: {
              ...user.features,
              matching: {
                ...user.features.matching,
                queues: action.payload.queues,
              },
            },
          };
        }
      });
      state.teams = teams;
    },
    setMemberAttributes: (state, action) => {
      let teams = JSON.parse(JSON.stringify(state.teams));
      Object.keys(teams).forEach((groupName) => {
        if (Object.keys(teams[groupName]).includes(action.payload.userId)) {
          const user = teams[groupName][action.payload.userId].user;
          teams[groupName][action.payload.userId].user = {
            ...user,
            features: {
              ...user.features,
              matching: {
                ...user.features.matching,
                attributes: action.payload.attributes,
              },
            },
          };
        }
      });
      state.teams = teams;
    },
  },
  // // The `reducers` field lets us define reducers and generate associated actions
  // reducers: {
  //   increment: (state) => {
  //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
  //     // doesn't actually mutate the state because it uses the Immer library,
  //     // which detects changes to a "draft state" and produces a brand new
  //     // immutable state based off those changes
  //     state.value += 1;
  //   },
  //   decrement: (state) => {
  //     state.value -= 1;
  //   },
  //   // Use the PayloadAction type to declare the contents of `action.payload`
  //   incrementByAmount: (state, action) => {
  //     state.value += action.payload;
  //   },
  // },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [getGroupsThunk.fulfilled]: (state, action) => {
      return {
        ...state,
        success: true,
        groups: action.payload.groups,
        teams: action.payload.groupMembers,
      };
    },
    [getGroupsThunk.rejected]: (state, action) => {
      return {
        ...state,
        success: false,
      };
    },
    [getUserThunk.fulfilled]: (state, action) => {
      let teams = JSON.parse(JSON.stringify(state.teams));
      Object.keys(teams).forEach((groupName) => {
        if (Object.keys(teams[groupName]).includes(action.payload.userId)) {
          teams[groupName][action.payload.userId] = {
            user: action.payload,
            isLoaded: true,
            userLoading: false,
            id: action.payload.userId,
          };
        }
      });
      return {
        ...state,
        success: true,
        teams: teams,
      };
    },
    [getUserThunk.rejected]: (state, action) => {
      let teams = JSON.parse(JSON.stringify(state.teams));
      Object.keys(teams).forEach((groupName) => {
        if (Object.keys(teams[groupName]).includes(action.payload.userId)) {
          teams[groupName][action.payload.userId]["userLoading"] = false;
        }
      });
      return {
        ...state,
        teams: teams,
        success: false,
      };
    },
    [getUserThunk.pending]: (state, action) => {
      let teams = JSON.parse(JSON.stringify(state.teams));
      Object.keys(teams).forEach((groupName) => {
        if (Object.keys(teams[groupName]).includes(action.meta.arg.userId)) {
          teams[groupName][action.meta.arg.userId]["userLoading"] = true;
        }
      });
      return {
        ...state,
        teams: teams,
        success: false,
      };
    },
    [updateUserThunk.fulfilled]: (state, action) => {
      let teams = JSON.parse(JSON.stringify(state.teams));
      Object.keys(teams).forEach((groupName) => {
        if (Object.keys(teams[groupName]).includes(action.payload.userId)) {
          teams[groupName][action.payload.userId] = {
            user: action.payload,
            isLoaded: true,
            userLoading: false,
            id: action.payload.userId,
          };
        }
      });
      return {
        ...state,
        success: true,
        teams: teams,
      };
    },
    [updateUserThunk.rejected]: (state, action) => {
      let teams = JSON.parse(JSON.stringify(state.teams));
      Object.keys(teams).forEach((groupName) => {
        if (Object.keys(teams[groupName]).includes(action.payload.userId)) {
          teams[groupName][action.payload.userId]["userLoading"] = false;
        }
      });
      return {
        ...state,
        success: false,
        teams: teams,
      };
    },
    [updateUserThunk.pending]: (state, action) => {
      let teams = JSON.parse(JSON.stringify(state.teams));
      Object.keys(teams).forEach((groupName) => {
        if (Object.keys(teams[groupName]).includes(action.meta.arg.userId)) {
          teams[groupName][action.meta.arg.userId]["userLoading"] = true;
        }
      });
      return {
        ...state,
        teams: teams,
        success: false,
      };
    },
  },
});
export const { setSelectedGroup, setMemberQueues, setMemberAttributes } =
  groupsSlice.actions;

export default groupsSlice.reducer;
